{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":104491,"databundleVersionId":12585144,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:00.369171Z","iopub.execute_input":"2025-06-12T19:05:00.369453Z","iopub.status.idle":"2025-06-12T19:05:00.759339Z","shell.execute_reply.started":"2025-06-12T19:05:00.369422Z","shell.execute_reply":"2025-06-12T19:05:00.758364Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/summer-analytics-mid-hackathon/hacktrain.csv\")\ntrain_df #ignore the warnings","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:04.153247Z","iopub.execute_input":"2025-06-12T19:05:04.153645Z","iopub.status.idle":"2025-06-12T19:05:04.306881Z","shell.execute_reply.started":"2025-06-12T19:05:04.153618Z","shell.execute_reply":"2025-06-12T19:05:04.305855Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:08.709514Z","iopub.execute_input":"2025-06-12T19:05:08.709859Z","iopub.status.idle":"2025-06-12T19:05:08.723555Z","shell.execute_reply.started":"2025-06-12T19:05:08.709834Z","shell.execute_reply":"2025-06-12T19:05:08.722540Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_df = pd.read_csv(\"/kaggle/input/summer-analytics-mid-hackathon/hacktest.csv\")\ntest_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:10.262351Z","iopub.execute_input":"2025-06-12T19:05:10.263038Z","iopub.status.idle":"2025-06-12T19:05:10.327611Z","shell.execute_reply.started":"2025-06-12T19:05:10.263008Z","shell.execute_reply":"2025-06-12T19:05:10.326522Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# dropping the unnecesary columns\ntrain_df.drop(columns=['Unnamed: 0'], inplace=True)\ntest_df.drop(columns=['Unnamed: 0'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:11.917383Z","iopub.execute_input":"2025-06-12T19:05:11.917763Z","iopub.status.idle":"2025-06-12T19:05:11.931236Z","shell.execute_reply.started":"2025-06-12T19:05:11.917734Z","shell.execute_reply":"2025-06-12T19:05:11.930070Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Identifying ndvi columns\nndvi_cols = [col for col in train_df.columns if col.endswith('_N')]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:13.290914Z","iopub.execute_input":"2025-06-12T19:05:13.291228Z","iopub.status.idle":"2025-06-12T19:05:13.296632Z","shell.execute_reply.started":"2025-06-12T19:05:13.291206Z","shell.execute_reply":"2025-06-12T19:05:13.295581Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ndvi_cols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:14.644566Z","iopub.execute_input":"2025-06-12T19:05:14.644929Z","iopub.status.idle":"2025-06-12T19:05:14.651817Z","shell.execute_reply.started":"2025-06-12T19:05:14.644895Z","shell.execute_reply":"2025-06-12T19:05:14.650177Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Handling values with median \n'''train_df[ndvi_cols] = train_df[ndvi_cols].fillna(train_df[ndvi_cols].median())\ntest_df[ndvi_cols] = test_df[ndvi_cols].fillna(train_df[ndvi_cols].median()) \n'''","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T13:06:24.128850Z","iopub.execute_input":"2025-06-12T13:06:24.129450Z","iopub.status.idle":"2025-06-12T13:06:24.135947Z","shell.execute_reply.started":"2025-06-12T13:06:24.129391Z","shell.execute_reply":"2025-06-12T13:06:24.134990Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# using KNN imputer\nfrom sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=5)\ntrain_df[ndvi_cols] = imputer.fit_transform(train_df[ndvi_cols])\ntest_df[ndvi_cols] = imputer.transform(test_df[ndvi_cols])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:20.432986Z","iopub.execute_input":"2025-06-12T19:05:20.433344Z","iopub.status.idle":"2025-06-12T19:05:29.780504Z","shell.execute_reply.started":"2025-06-12T19:05:20.433312Z","shell.execute_reply":"2025-06-12T19:05:29.779448Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# summary stats\ntrain_df['ndvi_mean'] = train_df[ndvi_cols].mean(axis=1)\ntrain_df['ndvi_std'] = train_df[ndvi_cols].std(axis=1)\ntrain_df['ndvi_max'] = train_df[ndvi_cols].max(axis=1)\ntrain_df['ndvi_min'] = train_df[ndvi_cols].min(axis=1)\n\ntest_df['ndvi_mean'] = test_df[ndvi_cols].mean(axis=1)\ntest_df['ndvi_std'] = test_df[ndvi_cols].std(axis=1)\ntest_df['ndvi_max'] = test_df[ndvi_cols].max(axis=1)\ntest_df['ndvi_min'] = test_df[ndvi_cols].min(axis=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:32.476145Z","iopub.execute_input":"2025-06-12T19:05:32.476676Z","iopub.status.idle":"2025-06-12T19:05:32.518616Z","shell.execute_reply.started":"2025-06-12T19:05:32.476650Z","shell.execute_reply":"2025-06-12T19:05:32.517765Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"features = ndvi_cols + ['ndvi_mean', 'ndvi_std', 'ndvi_max', 'ndvi_min']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:33.707492Z","iopub.execute_input":"2025-06-12T19:05:33.707792Z","iopub.status.idle":"2025-06-12T19:05:33.712684Z","shell.execute_reply.started":"2025-06-12T19:05:33.707771Z","shell.execute_reply":"2025-06-12T19:05:33.711511Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"features","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:37.650233Z","iopub.execute_input":"2025-06-12T19:05:37.651166Z","iopub.status.idle":"2025-06-12T19:05:37.659794Z","shell.execute_reply.started":"2025-06-12T19:05:37.651130Z","shell.execute_reply":"2025-06-12T19:05:37.658379Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# encoding target columns\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ntrain_df['class_encoded'] = le.fit_transform(train_df['class'])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:40.778455Z","iopub.execute_input":"2025-06-12T19:05:40.778784Z","iopub.status.idle":"2025-06-12T19:05:40.786334Z","shell.execute_reply.started":"2025-06-12T19:05:40.778761Z","shell.execute_reply":"2025-06-12T19:05:40.785195Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Feature Scaling \nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(train_df[features])\nX_test = scaler.transform(test_df[features])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:42.319511Z","iopub.execute_input":"2025-06-12T19:05:42.319949Z","iopub.status.idle":"2025-06-12T19:05:42.351376Z","shell.execute_reply.started":"2025-06-12T19:05:42.319923Z","shell.execute_reply":"2025-06-12T19:05:42.350157Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:45.108799Z","iopub.execute_input":"2025-06-12T19:05:45.110064Z","iopub.status.idle":"2025-06-12T19:05:45.114787Z","shell.execute_reply.started":"2025-06-12T19:05:45.109992Z","shell.execute_reply":"2025-06-12T19:05:45.113636Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# assigning labels\ny_train = train_df['class_encoded']\ny_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:05:46.963073Z","iopub.execute_input":"2025-06-12T19:05:46.963409Z","iopub.status.idle":"2025-06-12T19:05:46.971568Z","shell.execute_reply.started":"2025-06-12T19:05:46.963389Z","shell.execute_reply":"2025-06-12T19:05:46.970542Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Training\nmodel = LogisticRegression(max_iter=1000, multi_class='multinomial', solver='lbfgs')\nscores = cross_val_score(model, X_train, y_train, cv=15, scoring='accuracy')\nprint(\"Cross-validation accuracy of the model:\", scores.mean())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:08:50.936983Z","iopub.execute_input":"2025-06-12T19:08:50.937268Z","iopub.status.idle":"2025-06-12T19:09:01.987114Z","shell.execute_reply.started":"2025-06-12T19:08:50.937250Z","shell.execute_reply":"2025-06-12T19:09:01.985207Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# fit the model\nmodel.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:09:07.436167Z","iopub.execute_input":"2025-06-12T19:09:07.436475Z","iopub.status.idle":"2025-06-12T19:09:08.348744Z","shell.execute_reply.started":"2025-06-12T19:09:07.436456Z","shell.execute_reply":"2025-06-12T19:09:08.345778Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":" # checking if model is fitted or not\nprint(hasattr(model, \"coef_\")) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:09:09.464945Z","iopub.execute_input":"2025-06-12T19:09:09.465279Z","iopub.status.idle":"2025-06-12T19:09:09.471250Z","shell.execute_reply.started":"2025-06-12T19:09:09.465256Z","shell.execute_reply":"2025-06-12T19:09:09.470168Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Prediction!!!!!","metadata":{}},{"cell_type":"code","source":"\npreds = model.predict(X_test)\n\n# convert to original class columns\npred_labels = le.inverse_transform(preds)\n\n# submission file \nsubmission = pd.DataFrame({\n    'ID': test_df['ID'],\n    'class': pred_labels\n})\n\nsubmission.to_csv('submission.csv', index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T19:09:11.609148Z","iopub.execute_input":"2025-06-12T19:09:11.610315Z","iopub.status.idle":"2025-06-12T19:09:11.622715Z","shell.execute_reply.started":"2025-06-12T19:09:11.610257Z","shell.execute_reply":"2025-06-12T19:09:11.621635Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}