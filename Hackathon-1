{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":104491,"databundleVersionId":12585144,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-11T23:59:23.928133Z","iopub.execute_input":"2025-06-11T23:59:23.928439Z","iopub.status.idle":"2025-06-11T23:59:23.937649Z","shell.execute_reply.started":"2025-06-11T23:59:23.928418Z","shell.execute_reply":"2025-06-11T23:59:23.936494Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/summer-analytics-mid-hackathon/hacktest.csv\n/kaggle/input/summer-analytics-mid-hackathon/hacktrain.csv\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/summer-analytics-mid-hackathon/hacktrain.csv\")\ntrain_df #ignore the warnings","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T23:59:26.736261Z","iopub.execute_input":"2025-06-11T23:59:26.736553Z","iopub.status.idle":"2025-06-11T23:59:26.800544Z","shell.execute_reply.started":"2025-06-11T23:59:26.736531Z","shell.execute_reply":"2025-06-11T23:59:26.799685Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"      Unnamed: 0     ID       class  20150720_N  20150602_N  20150517_N  \\\n0              0      1       water    637.5950     658.668   -1882.030   \n1              1      2       water    634.2400     593.705   -1625.790   \n2              3      4       water     58.0174   -1599.160         NaN   \n3              4      5       water     72.5180         NaN     380.436   \n4              7      8       water   1136.4400         NaN         NaN   \n...          ...    ...         ...         ...         ...         ...   \n7995       10537  10538  impervious   1207.7000     984.620         NaN   \n7996       10538  10539  impervious   2170.3500    1419.720    1361.000   \n7997       10541  10542  impervious   1895.6800    1454.740         NaN   \n7998       10542  10543  impervious   3465.7400    1283.320     413.412   \n7999       10544  10545  impervious   6941.1900    1667.870    5084.780   \n\n      20150501_N  20150415_N  20150330_N  20150314_N  ...  20140610_N  \\\n0       -1924.36     997.904   -1739.990     630.087  ...         NaN   \n1       -1672.32     914.198    -692.386     707.626  ...         NaN   \n2       -1052.63         NaN   -1564.630         NaN  ...   -1025.880   \n3       -1256.93     515.805   -1413.180    -802.942  ...   -1813.950   \n4        1647.83    1935.800         NaN    2158.980  ...    1535.000   \n...          ...         ...         ...         ...  ...         ...   \n7995     1166.25     937.478    1072.700     823.896  ...    1117.740   \n7996     1478.71     983.911    1262.110    1422.860  ...     984.634   \n7997     1033.56    1930.380    1057.150    1471.600  ...     888.408   \n7998     4391.05    1146.820    4473.050    1614.750  ...    5833.760   \n7999         NaN    1588.950    5978.190         NaN  ...    7352.570   \n\n      20140525_N  20140509_N  20140423_N  20140407_N  20140322_N  20140218_N  \\\n0      -1043.160   -1942.490     267.138         NaN         NaN     211.328   \n1       -933.934    -625.385     120.059     364.858     476.972     220.878   \n2        368.622         NaN   -1227.800     304.621         NaN     369.214   \n3        155.624         NaN    -924.073     432.150     282.833     298.320   \n4       1959.430    -279.317    -384.915    -113.406    1020.720    1660.650   \n...          ...         ...         ...         ...         ...         ...   \n7995    1176.600    1044.110         NaN     369.082     465.843     362.882   \n7996    2128.970    1379.660         NaN     762.633     485.204     446.724   \n7997    2093.020    1232.110    1190.830    1441.460    1170.880    1095.000   \n7998    4047.320    4515.800     433.177     277.296     744.143         NaN   \n7999    3289.860    3729.150    1994.980         NaN    5299.900         NaN   \n\n      20140202_N  20140117_N  20140101_N  \n0      -2203.020    -1180.19     433.906  \n1      -2250.000    -1360.56     524.075  \n2      -2202.120         NaN   -1343.550  \n3      -2197.360         NaN    -826.727  \n4       -116.801     -568.05   -1357.140  \n...          ...         ...         ...  \n7995     979.795         NaN     433.659  \n7996     771.747     1589.06     506.936  \n7997    1818.650     2501.72    1247.770  \n7998    3759.710         NaN     388.346  \n7999    5983.130     1249.71    2424.230  \n\n[8000 rows x 30 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>ID</th>\n      <th>class</th>\n      <th>20150720_N</th>\n      <th>20150602_N</th>\n      <th>20150517_N</th>\n      <th>20150501_N</th>\n      <th>20150415_N</th>\n      <th>20150330_N</th>\n      <th>20150314_N</th>\n      <th>...</th>\n      <th>20140610_N</th>\n      <th>20140525_N</th>\n      <th>20140509_N</th>\n      <th>20140423_N</th>\n      <th>20140407_N</th>\n      <th>20140322_N</th>\n      <th>20140218_N</th>\n      <th>20140202_N</th>\n      <th>20140117_N</th>\n      <th>20140101_N</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>water</td>\n      <td>637.5950</td>\n      <td>658.668</td>\n      <td>-1882.030</td>\n      <td>-1924.36</td>\n      <td>997.904</td>\n      <td>-1739.990</td>\n      <td>630.087</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>-1043.160</td>\n      <td>-1942.490</td>\n      <td>267.138</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.328</td>\n      <td>-2203.020</td>\n      <td>-1180.19</td>\n      <td>433.906</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>water</td>\n      <td>634.2400</td>\n      <td>593.705</td>\n      <td>-1625.790</td>\n      <td>-1672.32</td>\n      <td>914.198</td>\n      <td>-692.386</td>\n      <td>707.626</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>-933.934</td>\n      <td>-625.385</td>\n      <td>120.059</td>\n      <td>364.858</td>\n      <td>476.972</td>\n      <td>220.878</td>\n      <td>-2250.000</td>\n      <td>-1360.56</td>\n      <td>524.075</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>4</td>\n      <td>water</td>\n      <td>58.0174</td>\n      <td>-1599.160</td>\n      <td>NaN</td>\n      <td>-1052.63</td>\n      <td>NaN</td>\n      <td>-1564.630</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>-1025.880</td>\n      <td>368.622</td>\n      <td>NaN</td>\n      <td>-1227.800</td>\n      <td>304.621</td>\n      <td>NaN</td>\n      <td>369.214</td>\n      <td>-2202.120</td>\n      <td>NaN</td>\n      <td>-1343.550</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>5</td>\n      <td>water</td>\n      <td>72.5180</td>\n      <td>NaN</td>\n      <td>380.436</td>\n      <td>-1256.93</td>\n      <td>515.805</td>\n      <td>-1413.180</td>\n      <td>-802.942</td>\n      <td>...</td>\n      <td>-1813.950</td>\n      <td>155.624</td>\n      <td>NaN</td>\n      <td>-924.073</td>\n      <td>432.150</td>\n      <td>282.833</td>\n      <td>298.320</td>\n      <td>-2197.360</td>\n      <td>NaN</td>\n      <td>-826.727</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>8</td>\n      <td>water</td>\n      <td>1136.4400</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1647.83</td>\n      <td>1935.800</td>\n      <td>NaN</td>\n      <td>2158.980</td>\n      <td>...</td>\n      <td>1535.000</td>\n      <td>1959.430</td>\n      <td>-279.317</td>\n      <td>-384.915</td>\n      <td>-113.406</td>\n      <td>1020.720</td>\n      <td>1660.650</td>\n      <td>-116.801</td>\n      <td>-568.05</td>\n      <td>-1357.140</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7995</th>\n      <td>10537</td>\n      <td>10538</td>\n      <td>impervious</td>\n      <td>1207.7000</td>\n      <td>984.620</td>\n      <td>NaN</td>\n      <td>1166.25</td>\n      <td>937.478</td>\n      <td>1072.700</td>\n      <td>823.896</td>\n      <td>...</td>\n      <td>1117.740</td>\n      <td>1176.600</td>\n      <td>1044.110</td>\n      <td>NaN</td>\n      <td>369.082</td>\n      <td>465.843</td>\n      <td>362.882</td>\n      <td>979.795</td>\n      <td>NaN</td>\n      <td>433.659</td>\n    </tr>\n    <tr>\n      <th>7996</th>\n      <td>10538</td>\n      <td>10539</td>\n      <td>impervious</td>\n      <td>2170.3500</td>\n      <td>1419.720</td>\n      <td>1361.000</td>\n      <td>1478.71</td>\n      <td>983.911</td>\n      <td>1262.110</td>\n      <td>1422.860</td>\n      <td>...</td>\n      <td>984.634</td>\n      <td>2128.970</td>\n      <td>1379.660</td>\n      <td>NaN</td>\n      <td>762.633</td>\n      <td>485.204</td>\n      <td>446.724</td>\n      <td>771.747</td>\n      <td>1589.06</td>\n      <td>506.936</td>\n    </tr>\n    <tr>\n      <th>7997</th>\n      <td>10541</td>\n      <td>10542</td>\n      <td>impervious</td>\n      <td>1895.6800</td>\n      <td>1454.740</td>\n      <td>NaN</td>\n      <td>1033.56</td>\n      <td>1930.380</td>\n      <td>1057.150</td>\n      <td>1471.600</td>\n      <td>...</td>\n      <td>888.408</td>\n      <td>2093.020</td>\n      <td>1232.110</td>\n      <td>1190.830</td>\n      <td>1441.460</td>\n      <td>1170.880</td>\n      <td>1095.000</td>\n      <td>1818.650</td>\n      <td>2501.72</td>\n      <td>1247.770</td>\n    </tr>\n    <tr>\n      <th>7998</th>\n      <td>10542</td>\n      <td>10543</td>\n      <td>impervious</td>\n      <td>3465.7400</td>\n      <td>1283.320</td>\n      <td>413.412</td>\n      <td>4391.05</td>\n      <td>1146.820</td>\n      <td>4473.050</td>\n      <td>1614.750</td>\n      <td>...</td>\n      <td>5833.760</td>\n      <td>4047.320</td>\n      <td>4515.800</td>\n      <td>433.177</td>\n      <td>277.296</td>\n      <td>744.143</td>\n      <td>NaN</td>\n      <td>3759.710</td>\n      <td>NaN</td>\n      <td>388.346</td>\n    </tr>\n    <tr>\n      <th>7999</th>\n      <td>10544</td>\n      <td>10545</td>\n      <td>impervious</td>\n      <td>6941.1900</td>\n      <td>1667.870</td>\n      <td>5084.780</td>\n      <td>NaN</td>\n      <td>1588.950</td>\n      <td>5978.190</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>7352.570</td>\n      <td>3289.860</td>\n      <td>3729.150</td>\n      <td>1994.980</td>\n      <td>NaN</td>\n      <td>5299.900</td>\n      <td>NaN</td>\n      <td>5983.130</td>\n      <td>1249.71</td>\n      <td>2424.230</td>\n    </tr>\n  </tbody>\n</table>\n<p>8000 rows × 30 columns</p>\n</div>"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"train_df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T23:59:29.867908Z","iopub.execute_input":"2025-06-11T23:59:29.868208Z","iopub.status.idle":"2025-06-11T23:59:29.879344Z","shell.execute_reply.started":"2025-06-11T23:59:29.868185Z","shell.execute_reply":"2025-06-11T23:59:29.878292Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"Unnamed: 0       0\nID               0\nclass            0\n20150720_N     560\n20150602_N    1200\n20150517_N     800\n20150501_N     960\n20150415_N     480\n20150330_N    1120\n20150314_N     720\n20150226_N    1360\n20150210_N     640\n20150125_N    1040\n20150109_N     880\n20141117_N    1280\n20141101_N     400\n20141016_N    1440\n20140930_N     800\n20140813_N     560\n20140626_N    1600\n20140610_N     480\n20140525_N     720\n20140509_N     880\n20140423_N    1760\n20140407_N     640\n20140322_N    1120\n20140218_N    1440\n20140202_N     560\n20140117_N    1200\n20140101_N     400\ndtype: int64"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"test_df = pd.read_csv(\"/kaggle/input/summer-analytics-mid-hackathon/hacktest.csv\")\ntest_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T23:59:42.671181Z","iopub.execute_input":"2025-06-11T23:59:42.671602Z","iopub.status.idle":"2025-06-11T23:59:42.718081Z","shell.execute_reply.started":"2025-06-11T23:59:42.671566Z","shell.execute_reply":"2025-06-11T23:59:42.717039Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"      Unnamed: 0    ID  20150720_N  20150602_N  20150517_N  20150501_N  \\\n0              0     1   7466.4200     413.162    5761.000     5625.45   \n1              1     2   7235.2600    6037.350    1027.560     6085.14   \n2              2     3   7425.0800    6969.980    1177.940     7408.93   \n3              3     4   7119.1200    1731.620    6311.930     6441.61   \n4              4     5   7519.5500    8130.260    1482.540     7879.53   \n...          ...   ...         ...         ...         ...         ...   \n2840        2840  2841  -1673.7400   -2514.480   -2451.190    -2738.44   \n2841        2841  2842    -96.8233    -412.727   -1795.400    -2363.82   \n2842        2842  2843  -2364.6000    -155.592   -1422.090    -1713.40   \n2843        2843  2844  -3004.6300   -1217.120     180.122    -1113.89   \n2844        2844  2845  -2975.1000   -1129.790     463.748    -5355.40   \n\n      20150415_N  20150330_N  20150314_N  20150226_N  ...  20140610_N  \\\n0       489.4030     3923.84    3097.110  6766.42000  ...     801.184   \n1      1618.0500     6668.54    2513.990  1051.69000  ...    5533.470   \n2       861.0610     7644.43     814.458  1504.29000  ...    1981.390   \n3       465.9790     7128.42    1649.120  6935.22000  ...     959.344   \n4      1001.2100     7937.60    4122.530  1094.51000  ...    7636.070   \n...          ...         ...         ...         ...  ...         ...   \n2840     64.4464    -2275.03   -2881.100 -4738.97000  ...   -2257.890   \n2841  -2168.1900    -2162.68   -3155.740 -4416.11000  ...   -3991.910   \n2842    465.6220    -2230.40   -3088.730 -5010.32000  ...   -2484.500   \n2843    438.4180    -2442.51   -3210.560 -3237.74000  ...   -3291.490   \n2844    193.5110    -2590.16   -3113.520    -2.38883  ...   -3058.230   \n\n      20140525_N  20140509_N  20140423_N  20140407_N  20140322_N  20140218_N  \\\n0        927.115     4704.14     6378.42     340.949   2695.5700     527.268   \n1       5103.040     5216.12     4885.27    4366.790   1234.1400    3298.110   \n2       6204.540     7021.69     5704.41    4897.450   1789.9900    2206.100   \n3       5794.150     1045.57     5572.90     586.287    685.9060    1287.000   \n4       6996.760     7413.43     4596.13    4511.700   1413.5200    3283.940   \n...          ...         ...         ...         ...         ...         ...   \n2840   -2582.420    -1699.10    -2295.30     306.483    209.4030     221.920   \n2841   -2614.910    -2109.84    -2687.18   -2853.890     71.3402     -86.414   \n2842   -1756.080    -3820.43    -1988.23     433.852    291.8000     254.548   \n2843   -2018.450    -3472.65    -3109.07     511.792    369.0970     276.948   \n2844   -2276.180    -3335.00    -2929.19   -1007.500    271.0580     307.997   \n\n      20140202_N  20140117_N  20140101_N  \n0        4736.75     601.843    6639.760  \n1        6942.68    1070.440     842.101  \n2        6928.93    1036.560     831.441  \n3        6734.72     824.584    6883.610  \n4        7937.68    1857.800    1336.920  \n...          ...         ...         ...  \n2840    -4885.15   -2630.590     356.233  \n2841    -5109.01     324.637   -4316.580  \n2842    -4259.30     412.115   -1170.750  \n2843    -5574.51     298.739     460.419  \n2844    -5453.33     307.495     417.124  \n\n[2845 rows x 29 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>ID</th>\n      <th>20150720_N</th>\n      <th>20150602_N</th>\n      <th>20150517_N</th>\n      <th>20150501_N</th>\n      <th>20150415_N</th>\n      <th>20150330_N</th>\n      <th>20150314_N</th>\n      <th>20150226_N</th>\n      <th>...</th>\n      <th>20140610_N</th>\n      <th>20140525_N</th>\n      <th>20140509_N</th>\n      <th>20140423_N</th>\n      <th>20140407_N</th>\n      <th>20140322_N</th>\n      <th>20140218_N</th>\n      <th>20140202_N</th>\n      <th>20140117_N</th>\n      <th>20140101_N</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>7466.4200</td>\n      <td>413.162</td>\n      <td>5761.000</td>\n      <td>5625.45</td>\n      <td>489.4030</td>\n      <td>3923.84</td>\n      <td>3097.110</td>\n      <td>6766.42000</td>\n      <td>...</td>\n      <td>801.184</td>\n      <td>927.115</td>\n      <td>4704.14</td>\n      <td>6378.42</td>\n      <td>340.949</td>\n      <td>2695.5700</td>\n      <td>527.268</td>\n      <td>4736.75</td>\n      <td>601.843</td>\n      <td>6639.760</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>7235.2600</td>\n      <td>6037.350</td>\n      <td>1027.560</td>\n      <td>6085.14</td>\n      <td>1618.0500</td>\n      <td>6668.54</td>\n      <td>2513.990</td>\n      <td>1051.69000</td>\n      <td>...</td>\n      <td>5533.470</td>\n      <td>5103.040</td>\n      <td>5216.12</td>\n      <td>4885.27</td>\n      <td>4366.790</td>\n      <td>1234.1400</td>\n      <td>3298.110</td>\n      <td>6942.68</td>\n      <td>1070.440</td>\n      <td>842.101</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>3</td>\n      <td>7425.0800</td>\n      <td>6969.980</td>\n      <td>1177.940</td>\n      <td>7408.93</td>\n      <td>861.0610</td>\n      <td>7644.43</td>\n      <td>814.458</td>\n      <td>1504.29000</td>\n      <td>...</td>\n      <td>1981.390</td>\n      <td>6204.540</td>\n      <td>7021.69</td>\n      <td>5704.41</td>\n      <td>4897.450</td>\n      <td>1789.9900</td>\n      <td>2206.100</td>\n      <td>6928.93</td>\n      <td>1036.560</td>\n      <td>831.441</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>4</td>\n      <td>7119.1200</td>\n      <td>1731.620</td>\n      <td>6311.930</td>\n      <td>6441.61</td>\n      <td>465.9790</td>\n      <td>7128.42</td>\n      <td>1649.120</td>\n      <td>6935.22000</td>\n      <td>...</td>\n      <td>959.344</td>\n      <td>5794.150</td>\n      <td>1045.57</td>\n      <td>5572.90</td>\n      <td>586.287</td>\n      <td>685.9060</td>\n      <td>1287.000</td>\n      <td>6734.72</td>\n      <td>824.584</td>\n      <td>6883.610</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>5</td>\n      <td>7519.5500</td>\n      <td>8130.260</td>\n      <td>1482.540</td>\n      <td>7879.53</td>\n      <td>1001.2100</td>\n      <td>7937.60</td>\n      <td>4122.530</td>\n      <td>1094.51000</td>\n      <td>...</td>\n      <td>7636.070</td>\n      <td>6996.760</td>\n      <td>7413.43</td>\n      <td>4596.13</td>\n      <td>4511.700</td>\n      <td>1413.5200</td>\n      <td>3283.940</td>\n      <td>7937.68</td>\n      <td>1857.800</td>\n      <td>1336.920</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2840</th>\n      <td>2840</td>\n      <td>2841</td>\n      <td>-1673.7400</td>\n      <td>-2514.480</td>\n      <td>-2451.190</td>\n      <td>-2738.44</td>\n      <td>64.4464</td>\n      <td>-2275.03</td>\n      <td>-2881.100</td>\n      <td>-4738.97000</td>\n      <td>...</td>\n      <td>-2257.890</td>\n      <td>-2582.420</td>\n      <td>-1699.10</td>\n      <td>-2295.30</td>\n      <td>306.483</td>\n      <td>209.4030</td>\n      <td>221.920</td>\n      <td>-4885.15</td>\n      <td>-2630.590</td>\n      <td>356.233</td>\n    </tr>\n    <tr>\n      <th>2841</th>\n      <td>2841</td>\n      <td>2842</td>\n      <td>-96.8233</td>\n      <td>-412.727</td>\n      <td>-1795.400</td>\n      <td>-2363.82</td>\n      <td>-2168.1900</td>\n      <td>-2162.68</td>\n      <td>-3155.740</td>\n      <td>-4416.11000</td>\n      <td>...</td>\n      <td>-3991.910</td>\n      <td>-2614.910</td>\n      <td>-2109.84</td>\n      <td>-2687.18</td>\n      <td>-2853.890</td>\n      <td>71.3402</td>\n      <td>-86.414</td>\n      <td>-5109.01</td>\n      <td>324.637</td>\n      <td>-4316.580</td>\n    </tr>\n    <tr>\n      <th>2842</th>\n      <td>2842</td>\n      <td>2843</td>\n      <td>-2364.6000</td>\n      <td>-155.592</td>\n      <td>-1422.090</td>\n      <td>-1713.40</td>\n      <td>465.6220</td>\n      <td>-2230.40</td>\n      <td>-3088.730</td>\n      <td>-5010.32000</td>\n      <td>...</td>\n      <td>-2484.500</td>\n      <td>-1756.080</td>\n      <td>-3820.43</td>\n      <td>-1988.23</td>\n      <td>433.852</td>\n      <td>291.8000</td>\n      <td>254.548</td>\n      <td>-4259.30</td>\n      <td>412.115</td>\n      <td>-1170.750</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>2843</td>\n      <td>2844</td>\n      <td>-3004.6300</td>\n      <td>-1217.120</td>\n      <td>180.122</td>\n      <td>-1113.89</td>\n      <td>438.4180</td>\n      <td>-2442.51</td>\n      <td>-3210.560</td>\n      <td>-3237.74000</td>\n      <td>...</td>\n      <td>-3291.490</td>\n      <td>-2018.450</td>\n      <td>-3472.65</td>\n      <td>-3109.07</td>\n      <td>511.792</td>\n      <td>369.0970</td>\n      <td>276.948</td>\n      <td>-5574.51</td>\n      <td>298.739</td>\n      <td>460.419</td>\n    </tr>\n    <tr>\n      <th>2844</th>\n      <td>2844</td>\n      <td>2845</td>\n      <td>-2975.1000</td>\n      <td>-1129.790</td>\n      <td>463.748</td>\n      <td>-5355.40</td>\n      <td>193.5110</td>\n      <td>-2590.16</td>\n      <td>-3113.520</td>\n      <td>-2.38883</td>\n      <td>...</td>\n      <td>-3058.230</td>\n      <td>-2276.180</td>\n      <td>-3335.00</td>\n      <td>-2929.19</td>\n      <td>-1007.500</td>\n      <td>271.0580</td>\n      <td>307.997</td>\n      <td>-5453.33</td>\n      <td>307.495</td>\n      <td>417.124</td>\n    </tr>\n  </tbody>\n</table>\n<p>2845 rows × 29 columns</p>\n</div>"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"# dropping the unnecesary columns\ntrain_df.drop(columns=['Unnamed: 0'], inplace=True)\ntest_df.drop(columns=['Unnamed: 0'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:00:34.361225Z","iopub.execute_input":"2025-06-12T00:00:34.362140Z","iopub.status.idle":"2025-06-12T00:00:34.372140Z","shell.execute_reply.started":"2025-06-12T00:00:34.362102Z","shell.execute_reply":"2025-06-12T00:00:34.371190Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# Identifying ndvi columns\nndvi_cols = [col for col in train_df.columns if col.endswith('_N')]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:01:48.496664Z","iopub.execute_input":"2025-06-12T00:01:48.497031Z","iopub.status.idle":"2025-06-12T00:01:48.502827Z","shell.execute_reply.started":"2025-06-12T00:01:48.497007Z","shell.execute_reply":"2025-06-12T00:01:48.501712Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"ndvi_cols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:01:54.946761Z","iopub.execute_input":"2025-06-12T00:01:54.947066Z","iopub.status.idle":"2025-06-12T00:01:54.953696Z","shell.execute_reply.started":"2025-06-12T00:01:54.947044Z","shell.execute_reply":"2025-06-12T00:01:54.952792Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"['20150720_N',\n '20150602_N',\n '20150517_N',\n '20150501_N',\n '20150415_N',\n '20150330_N',\n '20150314_N',\n '20150226_N',\n '20150210_N',\n '20150125_N',\n '20150109_N',\n '20141117_N',\n '20141101_N',\n '20141016_N',\n '20140930_N',\n '20140813_N',\n '20140626_N',\n '20140610_N',\n '20140525_N',\n '20140509_N',\n '20140423_N',\n '20140407_N',\n '20140322_N',\n '20140218_N',\n '20140202_N',\n '20140117_N',\n '20140101_N']"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"# Handling values with median \n'''train_df[ndvi_cols] = train_df[ndvi_cols].fillna(train_df[ndvi_cols].median())\ntest_df[ndvi_cols] = test_df[ndvi_cols].fillna(train_df[ndvi_cols].median())  # Use train stats\n'''","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:02:47.042730Z","iopub.execute_input":"2025-06-12T00:02:47.043173Z","iopub.status.idle":"2025-06-12T00:02:47.091587Z","shell.execute_reply.started":"2025-06-12T00:02:47.043142Z","shell.execute_reply":"2025-06-12T00:02:47.090464Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# using KNN imputer\nfrom sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=5)\ntrain_df[ndvi_cols] = imputer.fit_transform(train_df[ndvi_cols])\ntest_df[ndvi_cols] = imputer.transform(test_df[ndvi_cols])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:10:37.074593Z","iopub.execute_input":"2025-06-12T00:10:37.074988Z","iopub.status.idle":"2025-06-12T00:10:37.240177Z","shell.execute_reply.started":"2025-06-12T00:10:37.074963Z","shell.execute_reply":"2025-06-12T00:10:37.239303Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# summary stats\ntrain_df['ndvi_mean'] = train_df[ndvi_cols].mean(axis=1)\ntrain_df['ndvi_std'] = train_df[ndvi_cols].std(axis=1)\ntrain_df['ndvi_max'] = train_df[ndvi_cols].max(axis=1)\ntrain_df['ndvi_min'] = train_df[ndvi_cols].min(axis=1)\n\ntest_df['ndvi_mean'] = test_df[ndvi_cols].mean(axis=1)\ntest_df['ndvi_std'] = test_df[ndvi_cols].std(axis=1)\ntest_df['ndvi_max'] = test_df[ndvi_cols].max(axis=1)\ntest_df['ndvi_min'] = test_df[ndvi_cols].min(axis=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:10:38.371702Z","iopub.execute_input":"2025-06-12T00:10:38.372288Z","iopub.status.idle":"2025-06-12T00:10:38.412819Z","shell.execute_reply.started":"2025-06-12T00:10:38.372264Z","shell.execute_reply":"2025-06-12T00:10:38.411874Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"features = ndvi_cols + ['ndvi_mean', 'ndvi_std', 'ndvi_max', 'ndvi_min']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:10:39.287255Z","iopub.execute_input":"2025-06-12T00:10:39.287558Z","iopub.status.idle":"2025-06-12T00:10:39.292003Z","shell.execute_reply.started":"2025-06-12T00:10:39.287537Z","shell.execute_reply":"2025-06-12T00:10:39.291000Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"features","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:10:40.075248Z","iopub.execute_input":"2025-06-12T00:10:40.075544Z","iopub.status.idle":"2025-06-12T00:10:40.081644Z","shell.execute_reply.started":"2025-06-12T00:10:40.075521Z","shell.execute_reply":"2025-06-12T00:10:40.080737Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"['20150720_N',\n '20150602_N',\n '20150517_N',\n '20150501_N',\n '20150415_N',\n '20150330_N',\n '20150314_N',\n '20150226_N',\n '20150210_N',\n '20150125_N',\n '20150109_N',\n '20141117_N',\n '20141101_N',\n '20141016_N',\n '20140930_N',\n '20140813_N',\n '20140626_N',\n '20140610_N',\n '20140525_N',\n '20140509_N',\n '20140423_N',\n '20140407_N',\n '20140322_N',\n '20140218_N',\n '20140202_N',\n '20140117_N',\n '20140101_N',\n 'ndvi_mean',\n 'ndvi_std',\n 'ndvi_max',\n 'ndvi_min']"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"# encoding target columns\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ntrain_df['class_encoded'] = le.fit_transform(train_df['class'])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:10:43.687450Z","iopub.execute_input":"2025-06-12T00:10:43.687867Z","iopub.status.idle":"2025-06-12T00:10:43.694985Z","shell.execute_reply.started":"2025-06-12T00:10:43.687841Z","shell.execute_reply":"2025-06-12T00:10:43.693772Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"# Feature Scaling \nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(train_df[features])\nX_test = scaler.transform(test_df[features])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:10:47.036227Z","iopub.execute_input":"2025-06-12T00:10:47.037047Z","iopub.status.idle":"2025-06-12T00:10:47.067985Z","shell.execute_reply.started":"2025-06-12T00:10:47.037015Z","shell.execute_reply":"2025-06-12T00:10:47.067083Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:10:47.992817Z","iopub.execute_input":"2025-06-12T00:10:47.993114Z","iopub.status.idle":"2025-06-12T00:10:47.998501Z","shell.execute_reply.started":"2025-06-12T00:10:47.993095Z","shell.execute_reply":"2025-06-12T00:10:47.996944Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"# assigning labels\ny_train = train_df['class_encoded']\ny_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:10:48.609290Z","iopub.execute_input":"2025-06-12T00:10:48.609589Z","iopub.status.idle":"2025-06-12T00:10:48.617292Z","shell.execute_reply.started":"2025-06-12T00:10:48.609567Z","shell.execute_reply":"2025-06-12T00:10:48.616148Z"}},"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"0       5\n1       5\n2       5\n3       5\n4       5\n       ..\n7995    3\n7996    3\n7997    3\n7998    3\n7999    3\nName: class_encoded, Length: 8000, dtype: int64"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"# Training\nmodel = LogisticRegression(max_iter=1000, multi_class='multinomial', solver='lbfgs')\nscores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')\nprint(\"Cross-validation accuracy of the model:\", scores.mean())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:10:51.547760Z","iopub.execute_input":"2025-06-12T00:10:51.548082Z","iopub.status.idle":"2025-06-12T00:10:56.534083Z","shell.execute_reply.started":"2025-06-12T00:10:51.548059Z","shell.execute_reply":"2025-06-12T00:10:56.531431Z"}},"outputs":[{"name":"stdout","text":"Cross-validation accuracy of the model: 0.9001250000000001\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"# fit the model\nmodel.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:11:44.391690Z","iopub.execute_input":"2025-06-12T00:11:44.391985Z","iopub.status.idle":"2025-06-12T00:11:45.290648Z","shell.execute_reply.started":"2025-06-12T00:11:44.391966Z","shell.execute_reply":"2025-06-12T00:11:45.289298Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(max_iter=1000, multi_class='multinomial')","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000, multi_class=&#x27;multinomial&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, multi_class=&#x27;multinomial&#x27;)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":" # checking if model is fitted or not\nprint(hasattr(model, \"coef_\")) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:16:15.796824Z","iopub.execute_input":"2025-06-12T00:16:15.797127Z","iopub.status.idle":"2025-06-12T00:16:15.802270Z","shell.execute_reply.started":"2025-06-12T00:16:15.797109Z","shell.execute_reply":"2025-06-12T00:16:15.801358Z"}},"outputs":[{"name":"stdout","text":"True\n","output_type":"stream"}],"execution_count":40},{"cell_type":"markdown","source":"Prediction!!!!!","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(max_iter=1000, multi_class='multinomial', solver='lbfgs')\n\n# fitting the model on training data\nmodel.fit(X_train, y_train)  # <-- This is required\n\npreds = model.predict(X_test)\n\n# convert to original class columns\npred_labels = le.inverse_transform(preds)\n\n# submission file \nsubmission = pd.DataFrame({\n    'ID': test_df['ID'],\n    'class': pred_labels\n})\n\nsubmission.to_csv('submission.csv', index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T00:14:28.117252Z","iopub.execute_input":"2025-06-12T00:14:28.117559Z","iopub.status.idle":"2025-06-12T00:14:28.958140Z","shell.execute_reply.started":"2025-06-12T00:14:28.117536Z","shell.execute_reply":"2025-06-12T00:14:28.957409Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}